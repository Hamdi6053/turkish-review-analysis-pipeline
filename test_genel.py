import pandas as pd
import os
from prettytable import PrettyTable
import traceback

def analyze_file(file_path):
    """
    Excel veya CSV dosyasÄ±nÄ± analiz eder ve 1 sayÄ±sÄ±nÄ±, 0 sayÄ±sÄ±nÄ± ve benzersiz yorum sayÄ±sÄ±nÄ± dÃ¶ndÃ¼rÃ¼r
    
    Args:
        file_path: Excel veya CSV dosyasÄ±nÄ±n yolu
        
    Returns:
        dict: 1 sayÄ±sÄ±, 0 sayÄ±sÄ± ve benzersiz yorum sayÄ±sÄ±nÄ± iÃ§eren sÃ¶zlÃ¼k
    """
    result = {
        "dosya_adi": os.path.basename(file_path),
        "bir_sayisi": 0,
        "sifir_sayisi": 0,
        "benzersiz_yorum": 0
    }
    
    # Dosya yolunu temizle ve dÃ¼zelt
    file_path = file_path.strip()
    # Windows yollarÄ±nda ters eÄŸik Ã§izgiyi dÃ¼zelt
    file_path = file_path.replace('\\', '/')
    
    print(f"DÃ¼zeltilmiÅŸ dosya yolu: {file_path}")
    
    # DosyanÄ±n varlÄ±ÄŸÄ±nÄ± kontrol et
    if not os.path.exists(file_path):
        print(f"HATA: Dosya bulunamadÄ±: {file_path}")
        
        # Alternatif yol dene (r Ã¶neki kullanÄ±mÄ±)
        alt_path = file_path.replace('/', '\\')
        print(f"Alternatif yol deneniyor: {alt_path}")
        if os.path.exists(alt_path):
            file_path = alt_path
            print(f"Alternatif yol baÅŸarÄ±lÄ±!")
        else:
            print("Alternatif yol da baÅŸarÄ±sÄ±z oldu.")
            
            # Bir deneme daha yapalÄ±m - Ã§ift ters Ã§izgi ile
            alt_path2 = file_path.replace('/', '\\\\')
            print(f"Son bir deneme yapÄ±lÄ±yor: {alt_path2}")
            if os.path.exists(alt_path2):
                file_path = alt_path2
                print("Son deneme baÅŸarÄ±lÄ±!")
            else:
                return result
    
    # Dosya uzantÄ±sÄ±nÄ± kontrol et
    file_ext = os.path.splitext(file_path)[1].lower()
    
    try:
        if file_ext in ['.xlsx', '.xls', '.xlsm']:
            # Excel dosyasÄ±nÄ± oku
            print(f"Excel dosyasÄ± okunuyor: {file_path}")
            
            # engine parametresini belirtmeden dene
            try:
                # r Ã¶neki kullanarak oku
                df = pd.read_excel(r"{}".format(file_path))
                print("Excel dosyasÄ± baÅŸarÄ±yla okundu.")
            except Exception as e1:
                print(f"Standart okuma baÅŸarÄ±sÄ±z: {e1}")
                
                # openpyxl ile dene
                try:
                    df = pd.read_excel(r"{}".format(file_path), engine='openpyxl')
                    print("openpyxl motoru ile okuma baÅŸarÄ±lÄ±")
                except Exception as e2:
                    print(f"openpyxl ile okuma baÅŸarÄ±sÄ±z: {e2}")
                    
                    # xlrd ile dene (.xls iÃ§in)
                    try:
                        df = pd.read_excel(r"{}".format(file_path), engine='xlrd')
                        print("xlrd motoru ile okuma baÅŸarÄ±lÄ±")
                    except Exception as e3:
                        print(f"xlrd ile okuma baÅŸarÄ±sÄ±z: {e3}")
                        print(f"DetaylÄ± hata: {traceback.format_exc()}")
                        return result
        else:
            # CSV dosyasÄ± olarak dene
            try:
                # r Ã¶neki ile oku
                df = pd.read_csv(r"{}".format(file_path), sep=',', encoding='utf-8-sig')
            except Exception as e:
                print(f"VirgÃ¼lle okuma baÅŸarÄ±sÄ±z: {e}")
                # AyÄ±rÄ±cÄ±yÄ± otomatik tespit etmeyi dene
                df = pd.read_csv(r"{}".format(file_path), sep=None, engine='python', encoding='utf-8-sig')
    except Exception as e:
        print(f"{file_path} dosyasÄ± okunamadÄ±: {e}")
        print(f"DetaylÄ± hata: {traceback.format_exc()}")
        return result
    
    # SÃ¼tun adlarÄ±nÄ± kontrol et
    sonuc_sutunu = None
    for col in df.columns:
        if 'sonuc' in col.lower() or 'sonuÃ§' in col.lower():
            sonuc_sutunu = col
            break
    
    yorum_sutunu = None
    for col in df.columns:
        if 'yorum' in col.lower() or 'comment' in col.lower():
            yorum_sutunu = col
            break
    
    # SonuÃ§ deÄŸerlerini say
    if sonuc_sutunu:
        try:
            # SayÄ±sal deÄŸerlere dÃ¶nÃ¼ÅŸtÃ¼rme (gerekirse)
            df[sonuc_sutunu] = pd.to_numeric(df[sonuc_sutunu], errors='coerce')
            
            # 1 ve 0 sayÄ±larÄ±nÄ± hesapla
            result["bir_sayisi"] = (df[sonuc_sutunu] == 1).sum()
            result["sifir_sayisi"] = (df[sonuc_sutunu] == 0).sum()
        except Exception as e:
            print(f"SonuÃ§ sÃ¼tunu iÅŸlenirken hata: {e}")
    
    # Benzersiz yorum sayÄ±sÄ±nÄ± hesapla
    if yorum_sutunu:
        result["benzersiz_yorum"] = df[yorum_sutunu].nunique()
    
    return result

def analyze_multiple_files(file_paths):
    """
    Birden fazla Excel veya CSV dosyasÄ±nÄ± analiz eder ve sonuÃ§larÄ± tablo olarak gÃ¶sterir
    
    Args:
        file_paths: Excel veya CSV dosya yollarÄ±nÄ± iÃ§eren liste
    """
    # Tablo oluÅŸtur
    table = PrettyTable()
    table.field_names = ["Dosya AdÄ±", "1 SayÄ±sÄ±", "0 SayÄ±sÄ±", "Benzersiz Yorum SayÄ±sÄ±"]
    
    # Her dosyayÄ± analiz et ve tabloya ekle
    for file_path in file_paths:
        result = analyze_file(file_path)
        table.add_row([
            result["dosya_adi"], 
            result["bir_sayisi"], 
            result["sifir_sayisi"], 
            result["benzersiz_yorum"]
        ])
    
    # Tabloyu gÃ¶ster
    print("\nEXCEL ANALÄ°Z SONUÃ‡LARI:")
    print(table)

# KullanÄ±m Ã¶rneÄŸi:
if __name__ == "__main__":
    print("Excel/CSV Analiz ProgramÄ±")
    print("-----------------------")
    
    # Gerekli kÃ¼tÃ¼phaneleri kontrol et
    try:
        import pandas as pd
        print(f"Pandas sÃ¼rÃ¼mÃ¼: {pd.__version__}")
        
        try:
            import openpyxl
            print(f"Openpyxl sÃ¼rÃ¼mÃ¼: {openpyxl.__version__}")
        except ImportError:
            print("Openpyxl kÃ¼tÃ¼phanesi yÃ¼klÃ¼ deÄŸil! Excel dosyalarÄ± iÃ§in gerekli olabilir.")
            print("YÃ¼klemek iÃ§in: pip install openpyxl")
        
        try:
            import xlrd
            print(f"xlrd sÃ¼rÃ¼mÃ¼: {xlrd.__version__}")
        except ImportError:
            print("xlrd kÃ¼tÃ¼phanesi yÃ¼klÃ¼ deÄŸil! .xls dosyalarÄ± iÃ§in gerekli olabilir.")
            print("YÃ¼klemek iÃ§in: pip install xlrd")
    except Exception as e:
        print(f"KÃ¼tÃ¼phane kontrolÃ¼nde hata: {e}")
    
    # ğŸ“‚ Dosya yollarÄ±nÄ± buraya manuel olarak girin
    file_paths = [
        r"C:\Users\hamdi\Downloads\Exceller_Kategori_AtamalarÄ±\ÃœrÃ¼n.xlsx",
        r"C:\Users\hamdi\Downloads\Exceller_Kategori_AtamalarÄ±\Teslimat.xlsx",
        r"C:\Users\hamdi\Downloads\Exceller_Kategori_AtamalarÄ±\Sohbet_DesteÄŸi.xlsx",
        r"C:\Users\hamdi\Downloads\Exceller_Kategori_AtamalarÄ±\SipariÅŸ.xlsx",
        r"C:\Users\hamdi\Downloads\Exceller_Kategori_AtamalarÄ±\YarÄ±ÅŸma.xlsx",
        r"C:\Users\hamdi\Downloads\Exceller_Kategori_AtamalarÄ±\Teslimat_SÃ¼resi.xlsx",
        r"C:\Users\hamdi\Downloads\Exceller_Kategori_AtamalarÄ±\Stok.xlsx",
        r"C:\Users\hamdi\Downloads\Exceller_Kategori_AtamalarÄ±\Ã–deme_SeÃ§enekler.xlsx",
        r"C:\Users\hamdi\Downloads\Exceller_Kategori_AtamalarÄ±\KullanÄ±cÄ±_Dostu_ArayÃ¼z.xlsx",
        r"C:\Users\hamdi\Downloads\Exceller_Kategori_AtamalarÄ±\Ä°ndirim.xlsx",
        r"C:\Users\hamdi\Downloads\Exceller_Kategori_AtamalarÄ±\Ä°ade_Ä°ptal_DeÄŸiÅŸim.xlsx",
        r"C:\Users\hamdi\Downloads\Exceller_Kategori_AtamalarÄ±\Hedonik_DeÄŸer.xlsx",
        r"C:\Users\hamdi\Downloads\Exceller_Kategori_AtamalarÄ±\GÃ¼ven.xlsx",
        r"C:\Users\hamdi\Downloads\Exceller_Kategori_AtamalarÄ±\Boykot.xlsx",
        r"C:\Users\hamdi\Downloads\Exceller_Kategori_AtamalarÄ±\Bilgi_EriÅŸim.xlsx",

     
        # Daha fazla dosya ekleyebilirsiniz
    ]
    
    if file_paths:
        print(f"\n{len(file_paths)} dosya analiz edilecek...")
        analyze_multiple_files(file_paths)
    else:
        print("HiÃ§ dosya yolu girilmedi!")
